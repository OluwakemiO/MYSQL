---TEMP TABLES = TEMPORDARY TABLES.

---A temporary table is a base table that is not stored in the database but instead exists 
---only while the database session in which it was created is active.

---HOW TO CREATE A TEMP TABLE: A TEMP TABLE IS CREATED THE SAME WAY A NORMAL TABLE IS CREATED 
---BUT WITH THE POUND SIGN INCLUDED AT THE FRONT OF THE NAME OF THE TABLE.
--- LETS CREATE A TEMP TABLE CALLED TEMP_EMPLOYEE:

CREATE TABLE #temp_employee(
EmployeeID int,
Jobtitle varchar(100),
Salary int)

---NOW LETS RUN THE TABLE

SELECT *
FROM #temp_employee

---THE TABLE HAS BEEN CREATED, NOW LETS INSERT VALUES. THIS IS DONE IN THE SAME WAY AS NORMAL TABLES

INSERT INTO #temp_employee VALUES
(1001,'HR',45000)

---BUT WE DON'T HAVE TO INPUT VALUES INDIVIDUALLY. USUSALLY A TEMP TABLE IS CREATED WHEN WE WANT TO WORK WITH A PORTION OF A LARGER TABLE.
--- SO AN EXAMPLE, WE CAN ADD VALUES INTO THIS TABLE FROM ANOTHER TABLE IE THE EMPLOYEESAL TABLE AS FOLLOWS:

INSERT INTO #temp_employee 
SELECT*
FROM EmployeeSalary

---LETS CREATE ANOTHER TEMP TABLE AND CALL IT TEMP_EMPLOYEE2

DROP TABLE IF EXISTS #temp_employee2
CREATE TABLE #Temp_Employee2(
JobTitle varchar (50),
EmployeePerJob int,
AvgAge int,
AvgSalary int)

INSERT INTO #Temp_Employee2
SELECT JobTitle, COUNT(JobTitle),Avg(Salary),Avg(Age)
FROM EmployeeDemographics AS EDem
JOIN EmployeeSalary AS ESal
ON EDem.EmployeeID=ESal.EmployeeID
GROUP BY JobTitle

SELECT*
FROM #Temp_Employee2

---THE ABOVE SCRIPT, COUNT(JOBTITLE) IS PLACED IN THE EMPLOYEEPERJOB COLUMN. SO WE DONT HAVE TO RUN 
---ABOVE SCRIPT AGAIN, WE CAN JUST USE THE TEMP TABLE CREATED WHEN WE WANT TO RUN FURTHER SCRIPTS ON THE VALUES
---TEMP TABLES ARE USED MOSTLY FOR STORED PROCEDURES
---THE 'DROP TABLE IF EXISTS' STATEMENT ALLOWS YOU TO DELETE AN ALREADY EXISTING TEMP TABLE AND ALLOW IT
---TO BE CREATED AGAIN OVER AND OVER EACH TIME WE RE-RUN THE SCRIPT.




