----USING WHERE STATEMENT WITH THE FOLLOWING COMMANDS:
--- <>,<,>,AND,OR,LIKE,NULL,NOT NULL,IN

---WHERE WITH EQUAL TO

SELECT *
FROM EmployeeDemographics
WHERE FirstName='Jim'
---THE ABOVE STATEMENT FULFILS A QUERIE FOR FIRSTNAME IS JIM FROM THE 
---EMPLOYEEDEM TABLE SHOWING ALL THE DATE RELATING TO JIM BECAUSE OF THE *

--- WHERE WITH THE <,> SIGNS
SELECT FirstName,LastName
FROM EmployeeDemographics
WHERE AGE<=32
---ABOVE SCRIPT SELECTS THE FIRSTNAME AND LASTNAME FOR EMPLOYEES LESS THAN OR EQUAL TO 32 YEARS OF AGE

---WHERE WITH OR:ADDING THE OR PARAMETER TO ABOVE SCRIPT WILL ALTER IT AS FOLLOWS:

SELECT FirstName,LastName
FROM EmployeeDemographics
WHERE AGE<=32 OR GENDER='Male'
---while the first script selects the first and last names of everyone who is less than or equal to 32 years of age,
---the second script selects all the above who are MALE only. This is one of the ways our WHERE & OR commands can be used together
---
---WHERE WITH 'LIKE' COMMAND. THE FOLLOWING SCRIPT IS SAYING THAT THE SCRIPT SHOULD PICK ALL 
---FIRSTNAME THAT STARTS WITH THE LETTER 'S' FROM THE EMPLOYEEDEM TABLE
SELECT *
FROM EmployeeDemographics
WHERE FirstName LIKE 'S%'

---THE FOLLOWING SCRIPT SELECTS THE FIRST,LAST NAME AND AGE OF ALL EMPLOYEES WHO HAVE THE LETTER 'S' ANYWHERE IN THE FIRSTNAME
SELECT FirstName,LastName,Age
FROM EmployeeDemographics
WHERE FirstName LIKE '%S%'
---THE NEXT SCRIPT WILL RETURN THE FIRST,LAST NAMES OF EMPLOYEES WHOSE LASTNAME STARTS WITH LETTER 'S' AND ENDS WITH LETTER 'O'
SELECT FirstName,LastName,Age
FROM EmployeeDemographics
WHERE LastName LIKE 'S%O%'

---LETS LOOK AT OUR EMPLOYEESAL TABLE AGAIN AND SEE IF WE CAN CREATE A SIMILAR SCRIPTS FOR IT

SELECT *
FROM EmployeeSalary
---JOBTITLE STARTS WITH S
SELECT *
FROM EmployeeSalary
WHERE JobTitle LIKE 'S%'
---S IS ANYWHERE IN THE JOBTITLE
SELECT *
FROM EmployeeSalary
WHERE JobTitle LIKE '%S%'
---STARTS WITH S BUT WAS T ANYWHERE IN THE JOBTITLE
SELECT *
FROM EmployeeSalary
WHERE JobTitle LIKE 'S%T%'
---STARTS WITH S BUT ALSO HAS MAN ANYWHERE IN THE NAME BUT READING IT AS M-A-N IN THAT ORDER
SELECT *
FROM EmployeeSalary
WHERE JobTitle LIKE 'S%MAN%'

---WHERE WITH IN. IN IS LIKE EQUAL TO BUT MULTIPLE EQUAL TO.
---EXAMPLE, WE WANT TO SORT USING TWO PARAMETERS USING THE = COMMAND, WE CAN SAY

SELECT *
FROM EmployeeDemographics
WHERE FirstName='MICHAEL' AND FirstName='OYIN'

---IN THE ABOVE SCRIPT WE WANT THE SCRIPT TO RETURN ALL EMPLOYEE DETAILS WHO HAVE ONLY FIRSTNAME AS MICHAEL OR OYIN. 
---USING MULTIPLE EQUAL TO COMMAND, THE SCRIPT DOES NOT RETURN ANY VALUE. 
---BUT WHEN WE REPLACE THE EQUAL TO WITH THE IN COMMAND AS SHOWN BELOW,THE SCRIPT RETURNS THE DESIRED VALUES:

SELECT*
FROM EmployeeDemographics
WHERE FirstName IN ('MICHAEL','OYIN')

---WHERE WITH NULL AND NOT NULL COMMAND
---THE SCRIPT BELOW WILL RETURN EMPLOYEE DETAILS WHERE THE AGE CONTAINS THE WORD 'null'
SELECT *
FROM WareHouseEmployeeDemographics
WHERE Age IS NULL 
---THE SCRIPT BELOW WILL RETURN EMPLOYEE DETAILS WHERE THE AGE DOES NOT CONTAIN THE WORD 'null'
SELECT *
FROM WareHouseEmployeeDemographics
WHERE Age IS NOT NULL 

SELECT FirstName,LastName,(Age+1)as NewAge
FROM WareHouseEmployeeDemographics